export class Constants {
  static testDefault = '@Test\n\tpublic void testModuleNameClash() {\n\t\truntest(false, \n\t\t\t\t"module M { }",\n\t\t\t\t"module M { }");\n\t}\n\t\n\t@Test\n\tpublic void testModuleNameNoClash() {\n\t\truntest("module M { }",\n\t\t\t\t"module N { }");\n\t}\n\t\n\t@Test\n\tpublic void testUnresolvedImport() {\n\t\truntest(false,\n\t\t\t\t"module M { import N; }");\n\t}\n\t\n\t@Test\n\tpublic void testResolvedImport() {\n\t\truntest("module M { import N; }",\n\t\t\t\t"module N { }");\n\t}\n\t\n\t@Test\n\tpublic void testSelfImport() {\n\t\truntest(false, "module M { import M; }");\n\t}\n\n\t@Test\n\tpublic void testFunctionNameClash() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo() { }" +\n\t\t\t\t"  void foo() { }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testFunctionNoNameClash() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo() { }" +\n\t\t\t\t"  void bar() { }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testFunctionShadowingImport() {\n\t\truntest("module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  void foo() {}" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  public void foo() {}" +\n\t\t\t\t"}");\n\t}\n\n\t@Test\n\tpublic void testTypeNameClash() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"   type foo = \\"int\\";" +\n\t\t\t\t"  int bar;" +\n\t\t\t\t"  type foo = \\"boolean\\";"   +\n\t\t\t\t"}");\n\t}\n\t\n\t\t@Test\n\tpublic void testTypeNameNoClash() {\n\t\truntest("module M {" +\n\t\t\t\t"   type foo = \\"int\\";" +\n\t\t\t\t"  int bar;" +\n\t\t\t\t"  foo moo;" +\n\t\t\t\t"  type bar = \\"boolean\\";"   +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testTypeShadowingImport() {\n\t\truntest("module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  type foo = \\"int\\";" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  public type foo = \\"boolean\\";" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVarNameClash() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    int x;" +\n\t\t\t\t"    boolean x;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testFieldNameClash() {\n\t\truntest("module M {" +\n\t\t\t\t"  int x;" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    boolean x;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testFieldNameShadowingImport() {\n\t\truntest("module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  int x;" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  public int x;" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVarParameterNoNameClash() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo(int x) {" +\n\t\t\t\t"    boolean x;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testParameterNameClash() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo(int x, boolean x) {" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVarFieldNoNameClash() {\n\t\truntest("module M {" +\n\t\t\t\t"  int x;" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    boolean x;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVarNoNameClash() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    int x;" +\n\t\t\t\t"    {" +\n\t\t\t\t"      boolean x;" +\n\t\t\t\t"    }" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testUndeclaredVariable() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return res;" + \n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testUndeclaredFunctionName() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return bar(0);" + \n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testUndefinedUserType() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  foo bar;" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBreakOutsideLoop() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    break;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBreakInsideLoop() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    while(true)" +\n\t\t\t\t"      break;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBreakNestedInsideLoop() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    while(true) {" +\n\t\t\t\t"      if(true) {" +\n\t\t\t\t"        { break; }" +\n\t\t\t\t"      }" +\n\t\t\t\t"    }" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBreakNestedOutsideLoop() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    while(true) {}" +\n\t\t\t\t"    if(true) {" +\n\t\t\t\t"      { break; }" +\n\t\t\t\t"    }" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\n\t@Test\n\tpublic void testLookupLocal() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    int res;" +\n\t\t\t\t"    res = 23;" +\n\t\t\t\t"    return res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupLocalBad() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    res = 23;" +\n\t\t\t\t"    int res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupLocalNested() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    int res;" +\n\t\t\t\t"    res = 23;" +\n\t\t\t\t"    if(true)" +\n\t\t\t\t"      return res;" +\n\t\t\t\t"    return 0;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupFunction() {\n\t\truntest("module M {" +\n\t\t\t\t"  int bar() { return 23; }" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return bar();" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupImportedFunction() {\n\t\truntest("module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return bar();" +\n\t\t\t\t"  }" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  public int bar() { return 23; }" +\n\t\t\t\t"}");\n\t}\n\n\t @Test\n\tpublic void testLookupImportedFunctionFail() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return bar();" +\n\t\t\t\t"  }" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  int bar() { return 23; }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupField() {\n\t\truntest("module M {" +\n\t\t\t\t"  int res;" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupImportedField() {\n\t\truntest("module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  public int res;" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testLookupImportedFieldFail() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  import N;" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}",\n\t\t\t\t"module N {" +\n\t\t\t\t"  int res;" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidField() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo;" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidParameter() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo(void x) {}" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidLocal() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo() { void x; }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBooleanIfCond() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    if(true)" +\n\t\t\t\t"      return 42;" +\n\t\t\t\t"    return 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testCompIfCond() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    if(0<1+1)" +\n\t\t\t\t"      return 42;" +\n\t\t\t\t"    return 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testNonBooleanIfCond() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    if(0)" +\n\t\t\t\t"      return 42;" +\n\t\t\t\t"    return 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testReturnTypeWrong() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return true;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidReturn() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    return;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testExprReturn() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return 0;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\n\t@Test\n\tpublic void testExprReturnVoid() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  boolean foo() {" +\n\t\t\t\t"    return;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidTypeReturnWrong() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int bar() {}" +\n\t\t\t\t"  void foo() {" +\n\t\t\t\t"    return bar();" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testBooleanLoopCond() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    while(6>=0)" +\n\t\t\t\t"      return 42;" +\n\t\t\t\t"    return 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testNonBooleanWhileCond() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    while(5+5)" +\n\t\t\t\t"      return 42;" +\n\t\t\t\t"    return 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testCorrectArrayExpression() {\n\t\truntest("module M {" +\n\t\t\t\t"  boolean foo(boolean[][] bss, int i, int j) {" +\n\t\t\t\t"    return bss[i][j];" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testIncorrectArrayBaseExpression() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  boolean foo() {" +\n\t\t\t\t"  boolean[][] bss;" +\n\t\t\t\t"  bss[0] = true;" +\n\t\t\t\t"  return false;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testIncorrectArrayIndexExpression() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  boolean foo(boolean[][] bss, int i, boolean j) {" +\n\t\t\t\t"    return bss[i][j];" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testArityMatch() {\n\t\truntest(\n\t\t\t\t"module M {" +\n\t\t\t\t"  int id(int x, int y) { return x+y; }" +\n\t\t\t\t"  int foo() { return id(23, 42); }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testArityMismatchTooMany() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int id(int a) { return a; }" +\n\t\t\t\t"  int foo() { return id(1, 1); }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testArityMismatchTooFew() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int plus(int x, int y) { return x+y; }" +\n\t\t\t\t"  int foo() { return plus(23); }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testArgumentTypeMismatch() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int plus(int x, int y) { return x+y; }" +\n\t\t\t\t"  int foo() { return plus(23, false); }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testCorrectAssignment() {\n\t\truntest("module M {" +\n\t\t\t\t"  boolean foo() {" +\n\t\t\t\t"    boolean res;" +\n\t\t\t\t"    res = true;" +\n\t\t\t\t"    return res;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testNonNumericBinary() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int plus(boolean x) {" +\n\t\t\t\t"    return x + x;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testComparison() {\n\t\truntest("module M {" +\n\t\t\t\t"  void foo(int x) {" +\n\t\t\t\t"    if(x == 42)" +\n\t\t\t\t"      x = 23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testInvalidComparison() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo(int x) {" +\n\t\t\t\t"    if(x == true)" +\n\t\t\t\t"      x = 0;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testInvalidArithmeticComparison() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void foo(boolean x) {" +\n\t\t\t\t"    if(x > true)" +\n\t\t\t\t"      x = false;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testUnaryOperator() {\n\t\truntest("module M {" +\n\t\t\t\t"  int foo() {" +\n\t\t\t\t"    return -23;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testInvalidUnaryOperator() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int foo(boolean s) {" +\n\t\t\t\t"    return -s;" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testArrayLiteral() {\n\t\truntest("module M {" +\n\t\t\t\t"  int[] foo() {" +\n\t\t\t\t"    return [23, 42];" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testInvalidArrayLiteral() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  int[] foo() {" +\n\t\t\t\t"    return [true, 42];" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testInvalidArrayLiteral2() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void bar() {}" +\n\t\t\t\t"  int[] foo() {" +\n\t\t\t\t"    return [bar()];" +\n\t\t\t\t"  }" +\n\t\t\t\t"}");\n\t}\n\t\n\t@Test\n\tpublic void testVoidArrayType() {\n\t\truntest(false,\n\t\t\t\t"module M {" +\n\t\t\t\t"  void[] bar;" +\n\t\t\t\t"}");\n\t}';
}
